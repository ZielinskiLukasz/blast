0.1
 [x] initial release

0.2
 [x] add key commands for controlling player (minimal ui)
 [x] streaming load (optimize for speed/ux) - http://flask.pocoo.org/docs/patterns/streaming/
 [x] make shuffling refocus nextTrack item and scroll window
 [x] add help screen
 [x] fix progress meter updates on Safari (default to flash mode for now, which doesn't have this bug)
 [x] fix seeking on OSX:chrome,safari (default to flash mode for now, which doesn't have this bug)
 [x] iOS testing (using -x). works, but uses html5 player which has position/seeking update bug
 [x] add winamp style next/prev keybindings (next=b, prev=z)
 [x] fix help screen positioning; using bootstrap-modal
 [x] fix serving of non-mp3 files/outside of root dir; use relative paths to cwd
 [x] keep trying to load remaining tracks if a track 404's

trunk/0.3
 [x] make installable via python easy_install for quick setup
 [x] fix README formatting problems
 [ ] fix modal visibility problem on start
 [ ] generate ids for files so we don't have to send back unicode in query strings
 [ ] automate pypi upload:
        export COPYFILE_DISABLE=true
        python setup.py sdist upload
 
backlog
 [ ] properly center the modal help window
 [ ] markers / cue points
 [ ] A-B looping
 [ ] make html5 player work with seeking, reenable preferflash: false
 [ ] verify progress meter updates on iOS (after making html5 player work)
 [ ] make prev track work in shuffle mode
 [ ] figure out why 'MS5/jj - a jj 12_ (2009)_' is broken
 [ ] figure out a good way to automate testing of broken loads
 [ ] use databinding to reduce mem size for larger lists; investigate album-based pagination
 [ ] dir->album containers
     [ ] scan a dir, yank all .mp3 files into ordered list for playback
     [ ] if it's an image, try to determine the front/back image art and display it
     [ ] show all other files as clickable links (but minimized) within the container
 [ ] sortable dirs (timestamp, alpha, size, duration, bitrate, idv3, desc/asc)
 [ ] IDv2,3 loading (on-demand and/or async poll/scanner based)
 [ ] quick search
 [ ] duplicate detection
 [ ] file standardization
     [ ] atomic operations with strict validation & temporal undo - no data loss/corruption is acceptable
     [ ] help user rename files to common std format Artist - Album [(Year)]/Artist - 00 Track Name.mp3
     [ ] strip _'s, tags and other junk from directory and filenames to clean up your library
     [ ] syncronize IDv2,3 tags to filename
     [ ] ID tag reduction (2->3 etc)
 [ ] websockets/persistent conns for snappiness
 [ ] DJ-like mixing (see tracks as waveforms, scrub waveforms to cue point to play)
 [ ] service framework (offline scanning, indexing and other tasks)
 [ ] ui views for internal scanner/indexer state: 15,000/25,000 files scanned etc
 [ ] scan phases: names, stat, id tags, mp3sum (checksum of data part of mp3), total checksum
 [ ] drag/drop reordering + pop-out playlist controls
